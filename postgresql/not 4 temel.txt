CREATE TABLE IF NOT EXISTS countries(
	country_id VARCHAR(2),
	country_name VARCHAR(40) CHECK(country_name IN('Germany','America','Turkey')),
	region_id DECIMAL(10,2)
);
//CHECK fonksiyonu gelen country_name parametresinin IN içinde belirtilen ülkelerden biri olması için zorlar.

INSERT INTO countries(country_id,country_name,region_id) VALUES(2,'Italy',3);
//country_name parametre olarak Germany America ve Turkey kabuettiğinden hata verecek


CREATE TABLE products(
	id INTEGER,
	name TEXT,
	price NUMERIC CHECK(price >= 0)
);

CHECK fonksiyonu price alanının sıfıra eşit ya da büyük olması koşulunu kontrol eder.

INSERT INTO products VALUES(4,'Ferrari',0);

DROP TABLE IF EXISTS products;




CREATE TABLE products(
	id                INTEGER,
	name 		  TEXT,
	price 		  NUMERIC CHECK(price >= 0),
	discounted_price  NUMERIC CHECK(discounted_price >= 0 AND discounted_price < 100),
	CHECK(price > discounted_price)
);

//burada CHECK fonksiyonu discounted_price değerinin 0 ile 100 arasında ve price değerinden küçük olması
//şartını kontrol eder


INSERT INTO products VALUES(5,'Kot Pantolon',50,0);
--hata verecek



CREATE TABLE IF NOT EXISTS jobs(
	id VARCHAR(10),
	title VARCHAR(35),
	min_salary DECIMAL(6,0) CHECK(min_salary >= 8500),
	max_salary DECIMAL(6,0)
);
//burada CHECK fonksiyonu min_salary değerinin 8500e eşit ya da büyük olması şartını kontrol eder


CREATE TABLE employees(
	id SERIAL,
	fname VARCHAR(50),
	lname VARCHAR(50),
	birth_date DATE CHECK(birth_date > '1900-001-01'),
	joined_date DATE CHECK(joined_date > birth_date),
	salary NUMERIC CHECK(salary > 0)
);

INSERT INTO employees(fname,lname,birth_date,joined_date,salary) VALUES('John','Doe','1955-01-01','1988-01-01',-100);


********************************************************************************************************************************************************************

DROP TABLE person;

CREATE TABLE person(
	id SERIAL,
	fname VARCHAR(50),
	lname VARCHAR(50),
	uname VARCHAR(50),
	email VARCHAR(50),
	salary NUMERIC NOT NULL CHECK(salary >= 4250)
	UNIQUE(uname,email)
);

ALTER TABLE person ALTER COLUMN fname SET NOT NULL;

INSERT INTO person(fname,lname,uname,email) VALUES('kenan','tasdemir','kenant42','abc@hotmail.com');

INSERT INTO person(fname,lname,email) VALUES('kenan','tasdemir','abc@hotmail.com');

SELECT * FROM person;
DROP TABLE jobs;

********************************************************************************************************************************************************************

CREATE TABLE person(
	id SERIAL,
	fname VARCHAR(50),
	lname VARCHAR(50),
	email VARCHAR(50) UNIQUE
);
DROP TABLE person



CREATE TABLE person(
	id SERIAL,
	fname VARCHAR(50),
	lname VARCHAR(50),
	uname VARCHAR(50)
	email VARCHAR(50),
	UNIQUE(uname,email) //uname ve email değerleri her bir kayıtiçin benzersiz olmalıdır.
);

INSERT INTO person(fname,lname,email) VALUES('kenan','tasdemir','kenant42','abc@hotmail.com');
INSERT INTO person(fname,lname,email) VALUES('kenan','tasdemir','kenant42','abc@hotmail.com');
//iki kaydın uname ve email değerleri çakıştığı için ikinci sorguda hata verecektir.

SELECT * FROM person;

CREATE TABLE IF NOT EXISTS jobs(
	id 		INT UNIQUE,
	title 		VARCHAR(30) DEFAULT 'X',  //title parametresi verilmezse DEFAULT değer X
	min_salary 	DECIMAL(6,0) DEFAULT 8500,   //min_salary parametresi verilmezse DEFAULT değer 8500
	max_salary 	DECIMAL(6,0) DEFAULT NULL,   //max_salary parametresi verilmezse DEFAULT değer NULL
);

INSERT INTO jobs(id,max_salary) VALUES(2,5000);
//burada tabloya sadece 2 adet parametre geçilmiştir diğer sütunları tablo default değerler ile dolduracaktır.


INSERT INTO jobs(id,title,min_salary) VALUES(4,'Programci',5000);

SELECT * FROM jobs;







































